# Project: favorites-client

## Overview
This project is primarily written in React (38%), JavaScript (17%), JSON (13%), HTML (4%), CSS (4%) and uses the following technology stack: CSS, Git, HTML, JSON, JavaScript, Node.js, PostCSS, React, Tailwind CSS, Vite, npm.

## Dependencies
The main dependencies for this project are: lucide-react, react, react-dom, react-icons, react-router-dom, @types/react, @types/react-dom, @vitejs/plugin-react, autoprefixer, postcss, tailwindcss, vite

## Project Structure
The following is a concise directory tree of the project, limited to 3 levels deep and excluding common non-source directories:

├── src
│   ├── components
│   │   ├── FavoritesList.jsx
│   │   ├── FolderExplorer.jsx
│   │   ├── CreateFolderModal.jsx
│   │   ├── HelpModal.jsx
│   │   ├── DeleteFavorite.jsx
│   │   └── EditFavorite.jsx
│   ├── App.jsx
│   ├── index.css
│   ├── main.jsx
│   └── services
│       └── api.js
├── index.html
├── package.json
├── postcss.config.js
├── tailwind.config.js
└── vite.config.js


## Selected Files
The contents of specifically selected files are included below. Each file is preceded by its relative path within the project structure.

## Instructions for Analysis
When analyzing this project:
1. Consider the overall project structure and how the selected files fit within it.
2. Pay attention to the relationships between different files and directories.
3. Be prepared to answer questions about specific files, overall project architecture, or potential improvements.
4. If asked to modify or extend the project, ensure suggestions are consistent with the existing structure and style.

File: src\components\FavoritesList.jsx

import React, { useState, useEffect } from 'react'
import { getFavorites, getFolders } from '../services/api'
import EditFavorite from './EditFavorite'
import DeleteFavorite from './DeleteFavorite'
import { ChevronRight, ChevronDown, ChevronUp } from 'lucide-react'

const FavoritesList = ({ selectedFolderId }) => {
  const [favorites, setFavorites] = useState([])
  const [folders, setFolders] = useState([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [expandedDescriptions, setExpandedDescriptions] = useState({})

  useEffect(() => {
    const fetchData = async () => {
      setLoading(true)
      try {
        const [favoritesData, foldersData] = await Promise.all([
          getFavorites(selectedFolderId),
          getFolders()
        ])
        console.log('Fetched favorites:', favoritesData)
        console.log('Fetched folders:', foldersData)
        setFavorites(favoritesData)
        setFolders(foldersData)
        setLoading(false)
      } catch (err) {
        console.error('Error fetching data:', err)
        setError('Failed to fetch data')
        setLoading(false)
      }
    }

    fetchData()
  }, [selectedFolderId])

  const findFolderRecursive = (folders, id) => {
    for (let folder of folders) {
      if (folder.id.toString() === id.toString()) {
        return folder;
      }
      if (folder.children && folder.children.length > 0) {
        const found = findFolderRecursive(folder.children, id);
        if (found) {
          return found;
        }
      }
    }
    return null;
  };

  const getFolderPath = (folderId) => {
    const path = [];
    let currentFolder = findFolderRecursive(folders, folderId);
    
    while (currentFolder && currentFolder.name !== "Favorites") {
      path.unshift(currentFolder);
      currentFolder = findFolderRecursive(folders, currentFolder.parent_id);
    }
    return path;
  };

  const handleUpdateFavorite = (updatedFavorite) => {
    setFavorites(favorites.map(f => f.id === updatedFavorite.id ? updatedFavorite : f))
  }

  const handleDeleteFavorite = (deletedFavoriteId) => {
    setFavorites(favorites.filter(f => f.id !== deletedFavoriteId))
  }

  const toggleDescription = (favoriteId) => {
    setExpandedDescriptions(prev => ({
      ...prev,
      [favoriteId]: !prev[favoriteId]
    }))
  }

  if (loading) return <div>Loading favorites...</div>
  if (error) return <div className="text-red-500">{error}</div>

  if (!favorites || favorites.length === 0) {
    return <div>No favorites found in this folder</div>
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
      {favorites.map(favorite => {
        const folderPath = getFolderPath(favorite.folder_id)
        console.log(`Folder path for favorite ${favorite.id}:`, folderPath)
        const isExpanded = expandedDescriptions[favorite.id]
        return (
          <div key={favorite.id} className="bg-white p-4 rounded shadow">
            <div className="flex justify-between items-start mb-2">
              <h3 className="text-xl font-semibold">
                <a href={favorite.url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                  {favorite.title || 'Untitled'}
                </a>
              </h3>
              <div className="flex space-x-2">
                <EditFavorite
                  favorite={favorite}
                  onUpdate={handleUpdateFavorite}
                />
                <DeleteFavorite
                  favorite={favorite}
                  onDelete={handleDeleteFavorite}
                />
              </div>
            </div>
            {folderPath.length > 0 && (
              <div className="text-xs text-gray-500 mb-2 flex items-center flex-wrap">
                {folderPath.map((folder, index) => (
                  <React.Fragment key={folder.id}>
                    <span>{folder.name}</span>
                    {index < folderPath.length - 1 && <ChevronRight size={14} className="mx-1" />}
                  </React.Fragment>
                ))}
              </div>
            )}
            <div className="text-gray-600 mb-2">
              {isExpanded ? (
                <p>{favorite.summary || 'No summary available'}</p>
              ) : (
                <p>
                  {favorite.summary
                    ? `${favorite.summary.slice(0, 100)}${favorite.summary.length > 100 ? '...' : ''}`
                    : 'No summary available'}
                </p>
              )}
              {favorite.summary && favorite.summary.length > 100 && (
                <button
                  onClick={() => toggleDescription(favorite.id)}
                  className="text-blue-500 text-xs hover:underline focus:outline-none mt-1 flex items-center"
                >
                  {isExpanded ? (
                    <>
                      <ChevronUp size={16} className="mr-1" />
                      Show less
                    </>
                  ) : (
                    <>
                      <ChevronDown size={16} className="mr-1" />
                      Show more
                    </>
                  )}
                </button>
              )}
            </div>
            <div className="flex flex-wrap">
              {favorite.tags && favorite.tags.map(tag => (
                <span key={tag.id} className="bg-gray-200 text-gray-700 px-2 py-1 rounded mr-2 mb-2 text-sm">
                  {tag.name}
                </span>
              ))}
            </div>
            <div className="text-sm text-gray-500 mt-2">
              Created: {new Date(favorite.created_at).toLocaleDateString()}
            </div>
          </div>
        )
      })}
    </div>
  )
}

export default FavoritesList

---

File: src\components\FolderExplorer.jsx

import React, { useState, useEffect } from 'react'
import { getFolders, createFolder, deleteFolder, renameFolder } from '../services/api'
import { Folder, FolderOpen, Trash2, Edit, Plus, HelpCircle } from 'lucide-react'
import CreateFolderModal from './CreateFolderModal'
import HelpModal from './HelpModal'

const FolderExplorer = ({ onSelectFolder, selectedFolderId }) => {
  const [folders, setFolders] = useState([])
  const [expandedFolders, setExpandedFolders] = useState({})
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState(null)
  const [editingFolder, setEditingFolder] = useState(null)
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [isHelpModalOpen, setIsHelpModalOpen] = useState(false)

  useEffect(() => {
    fetchFolders()
  }, [])

  const fetchFolders = async () => {
    try {
      const data = await getFolders()
      setFolders(data)
      setLoading(false)
    } catch (err) {
      setError('Failed to fetch folders')
      setLoading(false)
    }
  }

  const toggleFolder = (folderId) => {
    setExpandedFolders(prev => ({
      ...prev,
      [folderId]: !prev[folderId]
    }))
  }

  const handleCreateFolder = async (name, description) => {
    const parentId = selectedFolderId === null ? 1 : selectedFolderId // Use root (1) if no folder is selected
    try {
      await createFolder(name, parentId, description)
      fetchFolders()
      // Expand the parent folder to show the new child
      setExpandedFolders(prev => ({
        ...prev,
        [parentId]: true
      }))
    } catch (err) {
      setError('Failed to create folder')
    }
  }

  const handleDeleteFolder = async (folderId) => {
    if (folderId === 1) {
      setError('Cannot delete the root folder')
      return
    }
    try {
      await deleteFolder(folderId)
      fetchFolders()
    } catch (err) {
      setError('Failed to delete folder')
    }
  }

  const handleRenameFolder = async (folderId, newName) => {
    if (folderId === 1) {
      setError('Cannot rename the root folder')
      return
    }
    try {
      await renameFolder(folderId, newName)
      setEditingFolder(null)
      fetchFolders()
    } catch (err) {
      setError('Failed to rename folder')
    }
  }

  const renderFolder = (folder) => {
    const isExpanded = expandedFolders[folder.id]
    const hasChildren = folder.children && folder.children.length > 0
    const isRootFolder = folder.id === 1
    const isSelected = selectedFolderId === folder.id

    return (
      <div key={folder.id} className="ml-4 mb-2">
        <div className={`flex items-center group ${isSelected ? 'bg-blue-100 rounded' : ''}`}>
          <button
            onClick={() => {
              onSelectFolder(folder.id, folder.name)
              if (hasChildren) toggleFolder(folder.id)
            }}
            className={`flex items-center text-left hover:text-blue-600 py-1 px-2 ${isSelected ? 'font-semibold text-blue-600' : ''}`}
          >
            {isExpanded ? <FolderOpen className="mr-2 text-blue-500" size={18} /> : <Folder className="mr-2 text-blue-500" size={18} />}
            {editingFolder === folder.id ? (
              <input
                type="text"
                value={folder.name}
                onChange={(e) => handleRenameFolder(folder.id, e.target.value)}
                onBlur={() => setEditingFolder(null)}
                onKeyDown={(e) => {
                  if (e.key === 'Enter') {
                    handleRenameFolder(folder.id, e.target.value)
                  } else if (e.key === 'Escape') {
                    setEditingFolder(null)
                  }
                }}
                className="border-b border-gray-300 focus:outline-none focus:border-blue-500"
                autoFocus
              />
            ) : (
              folder.name
            )}
          </button>
          <div className="ml-2 hidden group-hover:flex">
            {!isRootFolder && (
              <>
                <button onClick={() => setEditingFolder(folder.id)} className="text-gray-500 hover:text-blue-600 mr-2">
                  <Edit size={16} />
                </button>
                <button onClick={() => handleDeleteFolder(folder.id)} className="text-gray-500 hover:text-red-600 mr-2">
                  <Trash2 size={16} />
                </button>
              </>
            )}
            <button
              onClick={() => setIsCreateModalOpen(true)}
              className="text-gray-500 hover:text-green-600"
            >
              <Plus size={16} />
            </button>
          </div>
        </div>
        {isExpanded && hasChildren && (
          <div className="ml-4 mt-2">
            {folder.children.map(renderFolder)}
          </div>
        )}
      </div>
    )
  }

  if (loading) return <div>Loading folders...</div>
  if (error) return <div className="text-red-500">{error}</div>

  return (
    <div className="folder-explorer h-full flex flex-col">
      <div className="mb-4 flex items-center justify-between h-14 px-4">
        <h2 className="text-xl md:text-2xl font-bold flex items-center">
          Folders
          <button
            onClick={() => setIsHelpModalOpen(true)}
            className="ml-2 text-gray-500 hover:text-gray-700 focus:outline-none"
          >
            <HelpCircle size={20} />
          </button>
        </h2>
      </div>
      <div className="overflow-y-auto flex-grow px-4">
        {folders.map(folder => (
          <div key={folder.id}>
            {renderFolder(folder)}
          </div>
        ))}
      </div>
      <CreateFolderModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        onCreateFolder={handleCreateFolder}
      />
      <HelpModal
        isOpen={isHelpModalOpen}
        onClose={() => setIsHelpModalOpen(false)}
      />
    </div>
  )
}

export default FolderExplorer

---

File: src\App.jsx

import React, { useState, useCallback, useEffect } from "react";
import { BrowserRouter as Router, Route, Routes, NavLink } from "react-router-dom";
import { Home, ListTodo, Menu, X } from "lucide-react";
import FolderExplorer from "./components/FolderExplorer";
import FavoritesList from "./components/FavoritesList";
import TasksPage from "./components/TasksPage";

function App() {
    const [selectedFolderId, setSelectedFolderId] = useState(null);
    const [selectedFolderName, setSelectedFolderName] = useState("All Favorites");
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);

    const handleFolderSelect = useCallback((folderId, folderName) => {
        setSelectedFolderId(folderId === 1 ? null : folderId);
        setSelectedFolderName(folderId === 1 ? "All Favorites" : folderName);
    }, []);

    const toggleSidebar = () => {
        setIsSidebarOpen(!isSidebarOpen);
    };

    useEffect(() => {
        if (isSidebarOpen) {
            document.body.classList.add('sidebar-open');
        } else {
            document.body.classList.remove('sidebar-open');
        }
    }, [isSidebarOpen]);

    return (
        <Router>
            <div className="flex flex-col h-screen bg-gray-100">
                <nav className="bg-white text-gray-800 border-b border-gray-200 z-20">
                    <ul className="flex justify-between h-14 items-center px-4">
                        <li className="md:hidden">
                            <button onClick={toggleSidebar} className="p-2">
                                <Menu size={24} />
                            </button>
                        </li>
                        <li className="flex">
                            <NavLink
                                to="/"
                                className={({ isActive }) =>
                                    `flex items-center space-x-2 p-2 rounded transition-colors ${
                                        isActive ? "bg-blue-100 text-blue-600" : "hover:bg-gray-100"
                                    }`
                                }
                            >
                                <Home size={20} />
                                <span className="hidden md:inline">Home</span>
                            </NavLink>
                            <NavLink
                                to="/tasks"
                                className={({ isActive }) =>
                                    `flex items-center space-x-2 p-2 rounded transition-colors ${
                                        isActive ? "bg-blue-100 text-blue-600" : "hover:bg-gray-100"
                                    }`
                                }
                            >
                                <ListTodo size={20} />
                                <span className="hidden md:inline">Tasks</span>
                            </NavLink>
                        </li>
                    </ul>
                </nav>
                <div className="flex flex-grow overflow-hidden">
                    {/* Sidebar for mobile */}
                    <div className={`md:hidden fixed inset-0 bg-gray-600 bg-opacity-75 z-40 transition-opacity duration-300 ${isSidebarOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
                        <div className={`fixed inset-y-0 left-0 w-full bg-white shadow-xl transform transition-transform duration-300 ease-in-out ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}`}>
                            <div className="flex items-center justify-between h-14 px-4 border-b border-gray-200">
                                <h2 className="text-xl font-bold">Folders</h2>
                                <button onClick={toggleSidebar} className="p-2">
                                    <X size={24} />
                                </button>
                            </div>
                            <div className="p-4 h-full overflow-auto">
                                <FolderExplorer onSelectFolder={handleFolderSelect} selectedFolderId={selectedFolderId} />
                            </div>
                        </div>
                    </div>
                    {/* Sidebar for desktop */}
                    <div className="hidden md:block md:w-1/4 bg-white shadow-md">
                        <div className="p-4 h-full overflow-auto">
                            <FolderExplorer onSelectFolder={handleFolderSelect} selectedFolderId={selectedFolderId} />
                        </div>
                    </div>
                    <div className="w-full md:w-3/4 p-4 overflow-auto">
                        <Routes>
                            <Route
                                path="/"
                                element={
                                    <>
                                        <h1 className="text-3xl font-bold mb-4">{selectedFolderName}</h1>
                                        <FavoritesList selectedFolderId={selectedFolderId} />
                                    </>
                                }
                            />
                            <Route path="/tasks" element={<TasksPage />} />
                        </Routes>
                    </div>
                </div>
            </div>
        </Router>
    );
}

export default App;

---

File: src\index.css

@import "tailwindcss/base";
@import "tailwindcss/components";
@import "tailwindcss/utilities";

.folder-explorer button {
  background: none;
  border: none;
  cursor: pointer;
  display: flex;
  align-items: center;
  padding: 2px 0;
}

.folder-explorer button:hover {
  color: #3b82f6; /* Tailwind's blue-500 */
}

/* Responsive adjustments */
@media (max-width: 768px) {
  .folder-explorer {
    font-size: 14px;
  }
}

/* Prevent body scrolling when modal or mobile sidebar is open */
body.modal-open,
body.sidebar-open {
  overflow: hidden;
}

/* Ensure the mobile sidebar takes up the full height of the screen */
@media (max-width: 767px) {
  .sidebar-open .folder-explorer {
    height: calc(100vh - 3.5rem); /* Subtract the height of the sidebar header */
    overflow-y: auto;
  }
}

---

File: src\main.jsx

import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

---

File: index.html

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Favorites API Frontend</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

---

File: package.json

{
  "name": "favorites-api-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "lucide-react": "^0.436.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^5.3.0",
    "react-router-dom": "^6.26.1"
  },
  "devDependencies": {
    "@types/react": "^18.0.28",
    "@types/react-dom": "^18.0.11",
    "@vitejs/plugin-react": "^4.0.0",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.23",
    "tailwindcss": "^3.3.2",
    "vite": "^4.3.2"
  }
}


---

File: postcss.config.js

export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

---

File: tailwind.config.js

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

---

File: vite.config.js

import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()]
})

---

File: src\services\api.js

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL;

export const getFolders = async () => {
  const response = await fetch(`${API_BASE_URL}/folders`);
  if (!response.ok) {
    throw new Error('Failed to fetch folders');
  }
  return response.json();
};

export const getFavorites = async (folderId = null) => {
  const url = folderId 
    ? `${API_BASE_URL}/folders/${folderId}/favorites`
    : `${API_BASE_URL}/favorites`;
  const response = await fetch(url);
  if (!response.ok) {
    throw new Error('Failed to fetch favorites');
  }
  return response.json();
};

export const createFolder = async (name, parentId = null) => {
  const response = await fetch(`${API_BASE_URL}/folders`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ name, parent_id: parentId }),
  });
  if (!response.ok) {
    throw new Error('Failed to create folder');
  }
  return response.json();
};

export const deleteFolder = async (folderId) => {
  const response = await fetch(`${API_BASE_URL}/folders/${folderId}`, {
    method: 'DELETE',
  });
  if (!response.ok) {
    throw new Error('Failed to delete folder');
  }
};

export const renameFolder = async (folderId, newName) => {
  const response = await fetch(`${API_BASE_URL}/folders/${folderId}`, {
    method: 'PATCH',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ name: newName }),
  });
  if (!response.ok) {
    throw new Error('Failed to rename folder');
  }
  return response.json();
};

export const updateFavorite = async (favoriteId, updateData) => {
  const response = await fetch(`${API_BASE_URL}/favorites/${favoriteId}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updateData),
  });
  if (!response.ok) {
    throw new Error('Failed to update favorite');
  }
  return response.json();
};

export const deleteFavorite = async (favoriteId) => {
  const response = await fetch(`${API_BASE_URL}/favorites/${favoriteId}`, {
    method: 'DELETE',
  });
  if (!response.ok) {
    throw new Error('Failed to delete favorite');
  }
};

export const getTasks = async () => {
  const response = await fetch(`${API_BASE_URL}/favorites/tasks`);
  if (!response.ok) {
    throw new Error('Failed to fetch tasks');
  }
  return response.json();
};

---

File: src\components\CreateFolderModal.jsx

import React, { useState } from 'react';
import { X } from 'lucide-react';

const CreateFolderModal = ({ isOpen, onClose, onCreateFolder }) => {
  const [folderName, setFolderName] = useState('');
  const [folderDescription, setFolderDescription] = useState('');

  const handleSubmit = (e) => {
    e.preventDefault();
    onCreateFolder(folderName, folderDescription);
    setFolderName('');
    setFolderDescription('');
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-96">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Create New Folder</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X size={24} />
          </button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="folderName" className="block text-sm font-medium text-gray-700 mb-2">
              Folder Name
            </label>
            <input
              type="text"
              id="folderName"
              value={folderName}
              onChange={(e) => setFolderName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          <div className="mb-4">
            <label htmlFor="folderDescription" className="block text-sm font-medium text-gray-700 mb-2">
              Description (optional)
            </label>
            <textarea
              id="folderDescription"
              value={folderDescription}
              onChange={(e) => setFolderDescription(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows="3"
            ></textarea>
          </div>
          <div className="flex justify-end">
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Create Folder
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateFolderModal;

---

File: src\components\HelpModal.jsx

import React from 'react';
import { X } from 'lucide-react';

const HelpModal = ({ isOpen, onClose }) => {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-96 max-w-full">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Folder Management Help</h2>
          <button onClick={onClose} className="text-gray-500 hover:text-gray-700">
            <X size={24} />
          </button>
        </div>
        <div className="space-y-4">
          <p><strong>Creating a folder:</strong> Hover over any folder and click the + icon to create a new subfolder.</p>
          <p><strong>Renaming a folder:</strong> Hover over a folder and click the pencil icon to rename it.</p>
          <p><strong>Deleting a folder:</strong> Hover over a folder and click the trash icon to delete it.</p>
          <p><strong>Expanding/Collapsing:</strong> Click on a folder name to expand or collapse its contents.</p>
          <p><strong>Selecting a folder:</strong> Click on a folder name to select it and view its contents.</p>
          <p><strong>Note:</strong> The root "Favorites" item cannot be renamed or deleted.</p>
        </div>
      </div>
    </div>
  );
};

export default HelpModal;

---

File: src\components\DeleteFavorite.jsx

import React, { useState } from 'react';
import { X, Trash2 } from 'lucide-react';
import { deleteFavorite } from '../services/api';

const DeleteFavorite = ({ favorite, onDelete }) => {
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const handleDelete = async () => {
    try {
      await deleteFavorite(favorite.id);
      onDelete(favorite.id);
      setIsDialogOpen(false);
    } catch (error) {
      console.error('Failed to delete favorite:', error);
      // You might want to show an error message to the user here
    }
  };

  return (
    <>
      <button onClick={() => setIsDialogOpen(true)} className="text-gray-500 hover:text-red-600 focus:outline-none">
        <Trash2 size={18} />
      </button>
      {isDialogOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white p-6 rounded-lg shadow-lg w-96">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-bold">Delete Favorite</h2>
              <button onClick={() => setIsDialogOpen(false)} className="text-gray-500 hover:text-gray-700">
                <X size={24} />
              </button>
            </div>
            <p className="mb-4">Are you sure you want to delete this favorite?</p>
            <p className="mb-4 font-semibold">{favorite.title || 'Untitled'}</p>
            <div className="flex justify-end space-x-2">
              <button
                onClick={() => setIsDialogOpen(false)}
                className="px-4 py-2 bg-gray-300 text-gray-700 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500"
              >
                Cancel
              </button>
              <button
                onClick={handleDelete}
                className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-500"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default DeleteFavorite;

---

File: src\components\EditFavorite.jsx

import React, { useState } from 'react';
import { X, Edit } from 'lucide-react';
import { updateFavorite } from '../services/api';

const EditFavorite = ({ favorite, onClose, onUpdate }) => {
  const [isEditing, setIsEditing] = useState(false);
  const [title, setTitle] = useState(favorite.title || '');
  const [summary, setSummary] = useState(favorite.summary || '');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const updatedFavorite = await updateFavorite(favorite.id, { title, summary });
      onUpdate(updatedFavorite);
      setIsEditing(false);
    } catch (error) {
      console.error('Failed to update favorite:', error);
      // You might want to show an error message to the user here
    }
  };

  if (!isEditing) {
    return (
      <button onClick={() => setIsEditing(true)} className="text-gray-500 hover:text-blue-600 focus:outline-none">
        <Edit size={18} />
      </button>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-lg w-96">
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Edit Favorite</h2>
          <button onClick={() => setIsEditing(false)} className="text-gray-500 hover:text-gray-700">
            <X size={24} />
          </button>
        </div>
        <form onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="title" className="block text-sm font-medium text-gray-700 mb-2">
              Title
            </label>
            <input
              type="text"
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            />
          </div>
          <div className="mb-4">
            <label htmlFor="summary" className="block text-sm font-medium text-gray-700 mb-2">
              Summary
            </label>
            <textarea
              id="summary"
              value={summary}
              onChange={(e) => setSummary(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows="3"
            ></textarea>
          </div>
          <div className="flex justify-end">
            <button
              type="submit"
              className="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              Update Favorite
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EditFavorite;

---

